{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","renderHome","react_default","a","createElement","className","renderTest","renderAbout","href","renderMusic","title","min-width","height","scrolling","frameborder","allow","src","renderSocial","this","setState","menuEnabled","_this2","BrowserRouter","onClick","state","Link","to","Switch","Route","exact","path","render","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc468264.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\n\nclass App extends Component {\n  componentWillMount() {\n    this.setState({ menuEnabled: false })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div\n            onClick={() =>\n              this.setState({ menuEnabled: !this.state.menuEnabled })\n            }\n            className={\n              this.state.menuEnabled\n                ? 'menu-button menu-button-enabled'\n                : 'menu-button'\n            }\n          >\n            <div className=\"button-line\" />\n          </div>\n          <div\n            className={\n              this.state.menuEnabled ? 'menu-panel menu-enabled' : 'menu-panel'\n            }\n          >\n            <ul className=\"navigation\">\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/coding\">Coding</Link>\n              </li>\n              <li>\n                <Link to=\"/music\">Music</Link>\n              </li>\n              <li>\n                <Link to=\"/social\">Social</Link>\n              </li>\n            </ul>\n          </div>\n          <div\n            onClick={() => this.setState({ menuEnabled: false })}\n            className=\"App-content\"\n          >\n            <Switch>\n              <Route exact path=\"/\" render={() => this.renderHome()} />\n              <Route exact path=\"/(coding)\" render={() => this.renderTest()} />\n              <Route exact path=\"/about\" render={() => this.renderAbout()} />\n              <Route exact path=\"/music\" render={() => this.renderMusic()} />\n              <Route exact path=\"/social\" render={() => this.renderSocial()} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    )\n  }\n\n  renderHome = () => {\n    return (\n      <div className=\"content-container\">\n        <div className=\"developer-card\">\n          <h1 className=\"developer-name\">Mattes Wenzel</h1>\n          <span className=\"developer-slogan\">\n            Front-End Developer and Musician\n          </span>\n        </div>\n      </div>\n    )\n  }\n\n  renderTest = () => {\n    return (\n      <div>\n        <p>This is a test</p>\n      </div>\n    )\n  }\n\n  renderAbout = () => {\n    return (\n      <div className=\"content-container\">\n        <h2>About Me</h2>\n        <div className=\"profile-picture\" />\n        <div className=\"developer-about\">\n          <p>\n            My name is Mattes and I'm located in Berlin, Germany. Currently I am\n            a developer for <a href=\"https://artfacts.net\">Artfacts.net</a>.\n          </p>\n\n          <p>\n            My prefered programming languages are JavaScript, Python, Visual C#\n            and Java but I tried most of the big ones and also like to switch to\n            some odd stuff.\n          </p>\n\n          <p>\n            I enjoy mostly everything that can be solved by using a computer, be\n            it programming, music production, 3D Modeling or simply shoving data\n            from one structure into another.\n          </p>\n\n          <p>\n            Also electrical engeneering, hacking, cracking and reverse\n            engeneering will never cease to interest me.\n          </p>\n\n          <p>\n            I speak english and german fluently and have some basic knowledge of\n            spanish, hebrew and russian.\n          </p>\n          {/* <p>\n            Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\n            nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam\n            erat, sed diam voluptua.\n          </p>\n          <p>\n            At vero eos et accusam et justo duo dolores et ea rebum. Stet clita\n            kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n            amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed\n            diam nonumy eirmod tempor invidunt ut labore et dolore magna\n            aliquyam erat, sed diam voluptua.\n          </p>\n          <p>\n            At vero eos et accusam et justo duo dolores et ea rebum. Stet clita\n            kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n            amet.lorem\n          </p> */}\n        </div>\n      </div>\n    )\n  }\n\n  renderMusic = () => {\n    return (\n      <div className=\"content-container\">\n        <iframe\n          title=\"soundcloud-widget\"\n          min-width=\"100%\"\n          height=\"450\"\n          scrolling=\"no\"\n          frameborder=\"no\"\n          allow=\"autoplay\"\n          src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/307362001&color=%23626977&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true\"\n        />\n        <a href=\"https://soundcloud.com/vimptools\">\n          There is more where this comes from!\n        </a>\n      </div>\n    )\n  }\n\n  renderSocial = () => {\n    return (\n      <div className=\"content-container socialMediaList\">\n        <a href=\"https://twitter.com/mattesjup\">\n          <div className=\"socialMediaIcon twitterIcon\" />\n          Twitter\n        </a>\n        <a href=\"https://facebook.com/MattesJupWenzel\">\n          <div className=\"socialMediaIcon facebookIcon\" />\n          Facebook\n        </a>\n        <a href=\"https://www.linkedin.com/in/mattes-wenzel-9b034216b/\">\n          <div className=\"socialMediaIcon linkedInIcon\" />\n          LinkedIn\n        </a>\n        <a href=\"https://soundcloud.com/vimptools\">\n          <div className=\"socialMediaIcon soundcloudIcon\" />\n          SoundCloud\n        </a>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}